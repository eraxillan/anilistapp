/*
 * Copyright 2021 Aleksandr Kamyshnikov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
    id 'com.apollographql.apollo'
    //id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "name.eraxillan.anilistapp"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
                arg("room.incremental", "true")
                arg("room.expandProjection", "true")
            }
        }

        /*
        def token_file = project.file("anilist_token")
        if (!token_file.exists()) {
            token_file.write("<your_token>")
        }
        buildConfigField "String", "ANILIST_OAUTH_TOKEN", "\"" + token_file.readLines()[0].trim() + "\""
        */
    }

    buildFeatures {
        // Part of Android Jetpack: View Binding library
        // Allow to get rid of `findViewById` calls and achieve null/type safety
        // Documentation: https://developer.android.com/topic/libraries/view-binding
        viewBinding true

        // Part of Android Jetpack: Data Binding library
        // Allow to bind UI components in XML layouts to data sources in app
        // using a declarative format rather than programmatically
        // Documentation: https://developer.android.com/topic/libraries/data-binding
        dataBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        // Allow experimental API usage directly in code block, without entire function marking
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

dependencies {

    // Kotlin annotation processors
    kapt "androidx.room:room-compiler:$room_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    //kapt "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"

    implementation "androidx.core:core-ktx:$core_ctx_version"
    implementation "androidx.appcompat:appcompat:$app_compat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.preference:preference-ktx:$preference_ktx_version"
    implementation "androidx.recyclerview:recyclerview:$recycler_view_version"
    implementation "androidx.activity:activity-ktx:$activity_ktx_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"

    implementation "androidx.cardview:cardview:$card_view_version"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_refresh_layout_version"
    implementation "androidx.preference:preference-ktx:$preference_ktx_version"

    // Java 8+ API "desugaring" support: allow using new APIs on older versions of Android
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugar_jdk_libs_version"

    // Kotlin Coroutines library
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    // Main Lifecycle classes along with extensions such as LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_livedata_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // Room library
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    // Paging component
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // Networking components
    implementation "com.apollographql.apollo:apollo-runtime:$apollo_version"
    implementation "com.apollographql.apollo:apollo-coroutines-support:$apollo_version"
    implementation "com.apollographql.apollo:apollo-android-support:$apollo_version"
    implementation "com.apollographql.apollo:apollo-http-cache:$apollo_version"
    //implementation "com.apollographql.apollo:apollo-normalized-cache-sqlite:$apollo_version"
    //implementation "com.apollographql.apollo:apollo-rx2-support:$apollo_version"
    //implementation "com.apollographql.apollo:apollo-rx3-support:$apollo_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_logging_version"

    // Advanced logging
    implementation "com.jakewharton.timber:timber:$timber_version"

    //kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    testImplementation "junit:junit:$junit_version"
    //androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    androidTestImplementation "androidx.test.ext:junit:$test_ext_junit_version"
    androidTestImplementation "androidx.test:core-ktx:$test_core_ktx_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$test_espresso_core_version"
    //androidTestImplementation "com.google.dagger:hilt-android-testing:$rootProject.hilt_version"

    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
}

apollo {
    // Instruct the compiler to generate Kotlin models from GraphQL request files
    generateKotlinModels = true
}
